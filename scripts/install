#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source /usr/share/yunohost/helpers

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

app=$YNH_APP_INSTANCE_NAME
db_name=$(ynh_sanitize_dbid --db_name=$app)
domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
language=$YNH_APP_ARG_LANGUAGE

#Source common.sh required to be after var initialization as some variables are updated in it that are then used in the script
#when initializing the conf file of the app
source _common.sh


#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..." --weight=5

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..." --weight=5

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AN AVAILABLE PORT
#=================================================

# Find a free port
port=$(ynh_find_port 8083)
ynh_script_progression --message="Setting port $port..." --weight=5
ynh_app_setting_set $app port $port

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Downloading sources to $final_path..." --weight=10
ynh_app_setting_set $app final_path $final_path

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --weight=1
# Create a system user
ynh_system_user_create --username="$app" --home_dir="$final_path" --use_shell


#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_script_progression --message="Installing package dependencies..." --weight=80
ynh_exec_warn_less ynh_install_app_dependencies $PKG_DEPENDENCIES

#Use venv to install pip requirements - Inspired from https://github.com/YunoHost-Apps/pyinventory_ynh/blob/master/scripts/install
ynh_script_progression --message="Installing pip requirements..." --weight=70
# Always recreate everything fresh with current python version
if [ -d "${final_path}/venv" ] ; then
	ynh_secure_remove "${final_path}/venv"
fi

# Skip pip because of: https://github.com/YunoHost/issues/issues/1960
python3 -m venv "${final_path}/venv"
chown -R "$app:" "$final_path"

#run source in a 'sub shell'
(
	set +o nounset
	source "${final_path}/venv/bin/activate"
	set -o nounset
	ynh_exec_as $app $final_path/venv/bin/pip3 install --upgrade wheel pip setuptools
	ynh_exec_as $app $final_path/venv/bin/pip3 install --no-cache-dir --upgrade -r "$final_path/requirements.txt"
        ynh_exec_as $app $final_path/venv/bin/pip3 install psycopg2-binary ldap
)


#=================================================
# NGINX CONFIGURATION
#=================================================
#Cannot use empty string for X-script-name, causes an issue in the python prg
ynh_script_progression --message="Setting up system configuration..." --weight=5

if [ $path_url = "/" ] ; then
	ynh_replace_string "        proxy_set_header	X-Script-Name" "#        proxy_set_header	X-Script-Name" ../conf/nginx.conf
fi

# Create a dedicated nginx config
ynh_add_nginx_config


#=================================================
# CREATE A POSTGRESQL DATABASE
#=================================================
ynh_script_progression --message="Creating a PostgreSQL database..." --weight=1

ynh_psql_test_if_first_run
db_name=$(ynh_sanitize_dbid --db_name=$app)
db_user=$db_name
ynh_app_setting_set --app=$app --key=db_name --value=$db_name
ynh_psql_setup_db --db_user=$db_user --db_name=$db_name
db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)

#=================================================
# SETUP SYSTEMD
#=================================================

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# CREATE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Creating files and directory..." --weight=5
#Logic is as follow : if app is set to be publicly accessible, we will assume that the library should be set in "Share" multimedia directory
# If app is set to be private but access is requested for all user, we will assume the same
# If app is set to be private but access is limited to the admin user, we will set it inside his own multimedia directory.
# Access to the app is managed in the SSOwat part of the script.

mkdir -p /etc/etebase-server
mkdir -p /home/yunohost.app/etesync/static
mkdir -p /home/yunohost.app/etesync/static
mkdir -p /home/yunohost.app/etesync/media
chown -R $app:$app /home/yunohost.app/etesync

#build multimedia directory
#ynh_multimedia_build_main_dir
#ynh_multimedia_addaccess $app

#=================================================
# SETUP LOGROTATE
#=================================================

# Use logrotate to manage application logfile(s)
ynh_use_logrotate --logfile="$log_file"
ynh_use_logrotate --logfile="/var/log/$app/$access_log_file"
chown -R $app:$app /var/log/$app


#=================================================
# SPECIFIC SETUP
#=================================================

db_password=$(ynh_app_setting_get --app=$app --key=mysqlpwd)
ynh_add_config --template="etebase-server.ini" --destination="/etc/etebase-server/etebase-server.ini"
ynh_replace_special_string --match_string="__DB_PASSWORD__" --replace_string=$db_pwd --target_file="/etc/etebase-server/etebase-server.ini"

#=================================================
# STORE THE CHECKSUM OF THE CONFIG FILE
#=================================================


#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================

yunohost service add $app --description="Sync calendar, contact, and notes - E2EE" --log="$log_file"


#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

chown -R $app: $final_path
chmod 740 $final_path

#=================================================
# SETUP FAIL2BAN
#=================================================
ynh_script_progression --message="Configuring Fail2Ban..." --weight=8

#Â Make sure a log file exists (mostly for CI tests)
if [ ! -f "$log_file" ]; then
	touch "$log_file"
	chown $app: "$log_file"
fi

# Create a dedicated Fail2Ban config
#ynh_add_fail2ban_config --logpath="$log_file" --failregex="^.*LDAP Login failed for user .* IP-address: <HOST>.*$" --max_retry=5

#=================================================
# SETUP SSOWAT
#=================================================

# App is pretty useless if it can't be accessed remotely
ynh_permission_update --permission "main" --add visitors

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reload nginx and start $app..." --weight=5
ynh_systemd_action --service_name=nginx --action=reload
ynh_systemd_action --service_name=$app --action="start" --line_match="Starting Gevent server on" -t 30

#=================================================
# END OF SCRIPT
#=================================================
ynh_script_progression --message="Installation of $app completed" --last
